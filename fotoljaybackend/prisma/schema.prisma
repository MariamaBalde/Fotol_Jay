generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  UTILISATEUR
  VIP
  MODERATEUR
  ADMINISTRATEUR
}

enum StatutProduit {
  EN_ATTENTE
  APPROUVE
  REFUSE
  EXPIRE
}

model Utilisateur {
  id               String    @id @default(cuid())
  email            String    @unique
  motDePasse       String
  prenom           String
  nom              String
  telephone        String
  photoProfil      String?
  localisation     String?
  role             Role      @default(UTILISATEUR)
  finVip           DateTime?
  statutModerateur String?   @default("ACTIF") // 'ACTIF', 'INACTIF', 'SUSPENDU'
  dateCreation     DateTime  @default(now())
  dateMiseAJour    DateTime  @updatedAt

  produits             Produit[]
  notifications        Notification[]
  signalementsSignales Signalement[]        @relation("Signaleur")
  signalementsTraites  Signalement[]        @relation("Moderateur")
  erreursSysteme       ErreurSysteme[]
  decisionsModeration  DecisionModeration[]
  feedbacksModerateur  FeedbackModerateur[] @relation("FeedbackModerateur")
  feedbacksUtilisateur FeedbackModerateur[] @relation("FeedbackUtilisateur")
  abonnementsVIP       AbonnementVIP[]
  historiquePrixVIP    HistoriquePrixVIP[]

  @@index([email])
}

model Produit {
  id             String        @id @default(cuid())
  titre          String
  description    String        @db.Text
  prix           Float
  categorie      String
  etat           String
  localisation   String?
  statut         StatutProduit @default(EN_ATTENTE)
  raisonRefus    String?       @db.Text
  vues           Int           @default(0)
  nombreContacts Int           @default(0)

  utilisateurId String
  utilisateur   Utilisateur @relation(fields: [utilisateurId], references: [id], onDelete: Cascade)

  images              ImageProduit[]
  decisionsModeration DecisionModeration[]

  dateCreation   DateTime @default(now())
  dateExpiration DateTime
  dateMiseAJour  DateTime @updatedAt

  @@index([statut, dateCreation])
  @@index([utilisateurId])
  @@index([dateExpiration])
}

model ImageProduit {
  id           String  @id @default(cuid())
  url          String  @db.Text
  urlMiniature String? @db.Text
  ordre        Int

  produitId String
  produit   Produit @relation(fields: [produitId], references: [id], onDelete: Cascade)

  dateCreation DateTime @default(now())

  @@index([produitId])
}

model Notification {
  id      String  @id @default(cuid())
  type    String
  titre   String
  message String  @db.Text
  estLu   Boolean @default(false)

  utilisateurId String
  utilisateur   Utilisateur @relation(fields: [utilisateurId], references: [id], onDelete: Cascade)

  dateCreation DateTime @default(now())

  @@index([utilisateurId, estLu])
  @@index([dateCreation])
}

model Signalement {
  id          String @id @default(cuid())
  type        String // 'UTILISATEUR', 'PRODUIT', 'COMMENTAIRE'
  raison      String @db.Text
  description String @db.Text
  statut      String @default("EN_ATTENTE") // 'EN_ATTENTE', 'TRAITE', 'REJETE'

  signaleurId String
  signaleur   Utilisateur @relation("Signaleur", fields: [signaleurId], references: [id])

  cibleId   String // ID de l'utilisateur ou produit signalé
  cibleType String // 'UTILISATEUR' ou 'PRODUIT'

  traiteParId String?
  traitePar   Utilisateur? @relation("Moderateur", fields: [traiteParId], references: [id])

  dateCreation   DateTime  @default(now())
  dateTraitement DateTime?

  @@index([statut])
  @@index([cibleType, cibleId])
}

model ErreurSysteme {
  id         String  @id @default(cuid())
  niveau     String // 'ERROR', 'WARNING', 'INFO'
  message    String  @db.Text
  stackTrace String? @db.Text
  url        String?
  userAgent  String?
  ip         String?

  utilisateurId String?
  utilisateur   Utilisateur? @relation(fields: [utilisateurId], references: [id])

  dateCreation DateTime @default(now())

  @@index([niveau, dateCreation])
  @@index([utilisateurId])
}

model ParametreVIP {
  id          String  @id @default(cuid())
  cle         String  @unique
  valeur      String
  description String?
  type        String  @default("STRING") // 'STRING', 'NUMBER', 'BOOLEAN'

  dateCreation  DateTime @default(now())
  dateMiseAJour DateTime @updatedAt
}

model TarificationVIP {
  id                String  @id @default(cuid())
  duree             Int // durée en jours (7, 15, 30, etc.)
  prix              Float
  devise            String  @default("XOF")
  reductionPourcent Float? // réduction pour achats multiples
  estActif          Boolean @default(true)

  dateCreation  DateTime @default(now())
  dateMiseAJour DateTime @updatedAt

  @@index([duree, estActif])
}

model CodePromoVIP {
  id                    String    @id @default(cuid())
  code                  String    @unique
  description           String?
  reductionPourcent     Float
  reductionMontant      Float?
  dureeBonus            Int? // jours bonus
  utilisationsMax       Int?
  utilisationsActuelles Int       @default(0)
  dateExpiration        DateTime?
  estActif              Boolean   @default(true)

  dateCreation  DateTime @default(now())
  dateMiseAJour DateTime @updatedAt

  @@index([code])
  @@index([estActif, dateExpiration])
}

model AbonnementVIP {
  id            String      @id @default(cuid())
  utilisateurId String
  utilisateur   Utilisateur @relation(fields: [utilisateurId], references: [id], onDelete: Cascade)

  dateDebut DateTime
  dateFin   DateTime
  duree     Int // durée en jours
  prixTotal Float
  devise    String   @default("XOF")
  statut    String   @default("ACTIF") // 'ACTIF', 'EXPIRE', 'ANNULE', 'REMBOURSE'
  codePromo String?

  // Métriques
  produitsPublies Int @default(0)
  vuesTotales     Int @default(0)
  contactsTotal   Int @default(0)

  dateCreation  DateTime @default(now())
  dateMiseAJour DateTime @updatedAt

  @@index([utilisateurId, statut])
  @@index([dateFin])
}

model HistoriquePrixVIP {
  id           String      @id @default(cuid())
  duree        Int
  ancienPrix   Float
  nouveauPrix  Float
  devise       String      @default("XOF")
  raison       String?
  modifieParId String
  modifiePar   Utilisateur @relation(fields: [modifieParId], references: [id])

  dateCreation DateTime @default(now())

  @@index([duree, dateCreation])
}

model DecisionModeration {
  id            String  @id @default(cuid())
  decision      String // 'APPROUVER', 'REFUSER'
  commentaire   String? @db.Text
  tempsDecision Int // en millisecondes

  produitId String
  produit   Produit @relation(fields: [produitId], references: [id], onDelete: Cascade)

  moderateParId String
  moderatePar   Utilisateur @relation(fields: [moderateParId], references: [id])

  dateCreation DateTime @default(now())

  @@index([moderateParId, dateCreation])
}

model FeedbackModerateur {
  id          String  @id @default(cuid())
  note        Int // 1-5
  commentaire String? @db.Text
  type        String // 'POSITIF', 'NEGATIF', 'NEUTRE'

  moderateurId String
  moderateur   Utilisateur @relation("FeedbackModerateur", fields: [moderateurId], references: [id])

  utilisateurId String
  utilisateur   Utilisateur @relation("FeedbackUtilisateur", fields: [utilisateurId], references: [id], onDelete: Cascade)

  dateCreation DateTime @default(now())

  @@index([moderateurId])
  @@index([utilisateurId])
}
